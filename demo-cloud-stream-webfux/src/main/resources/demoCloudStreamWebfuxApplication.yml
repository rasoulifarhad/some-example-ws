#spring.application.name: customer-service
#server.port: 8080
logging.level.root: INFO
management:
  endpoints:
    web:
      exposure:
        include: "*"
#        exclude: "env,beans"
    jmx:
      exposure:
        include: "*"

### explicit binding creation
# spring.cloud.stream.input-bindings: fooin;barin
# context.getBean("fooin-in-0" , MessageChannel.class) 
# context.getBean("barin-in-0" , MessageChannel.class) 
# spring.cloud.stream.output-bindings: fooout;barout
# context.getBean("fooout-out-0" , MessageChannel.class) 
# context.getBean("barout-out-0" , MessageChannel.class) 
#
### Binding Service Properties
## These properties are exposed via org.springframework.cloud.stream.config.BindingServiceProperties
## must be prefixed with spring.cloud.stream.
## instanceCount/instanceIndex/dynamicDestinations/defaultBinder/overrideCloudConnectors/bindingRetryInterval
### Binding properties 
## These properties are exposed via org.springframework.cloud.stream.config.BindingProperties
## Binding properties are supplied using the format spring.cloud.stream.bindings.<channelName>.<property>=<value>. 
## The <channelName> represents the name of the channel being configured (e.g., output for a Source).
## Properties for Use of Spring Cloud Stream
## destination /  group  /  contentType  /binder 
### setting values for all bindings, 
#   spring.cloud.stream.default.<property>=<value> 
#   and 
#   spring.cloud.stream.default.<producer|consumer>.<property>=<value>
# example 
#   spring.cloud.stream.default.contentType=application/json
#   spring.cloud.stream.default.consumer.headerMode=none
#   spring.cloud.stream.default.producer.partitionKeyExpression=headers.id
### Consumer properties
## These properties are exposed via org.springframework.cloud.stream.binder.ConsumerProperties
## must be prefixed with spring.cloud.stream.bindings.<channelName>.consumer
## concurrency/partitioned/headerMode/maxAttempts/backOffInitialInterval/backOffMaxInterval/backOffMultiplier/instanceIndex/instanceCount
### Producer Properties
## These properties are exposed via org.springframework.cloud.stream.binder.ProducerProperties
## must be prefixed with spring.cloud.stream.bindings.<channelName>.producer.
## partitionKeyExpression/partitionKeyExtractorClass/partitionSelectorClass/partitionSelectorExpression/partitionCount/requiredGroups/headerMode
##
### Binder Configuration Properties
## These properties exposed via org.springframework.cloud.stream.config.BinderProperties
## They must be prefixed with spring.cloud.stream.binders.<configurationName>.
## type / inheritEnvironment / environment / defaultCandidate
##
### Polling Configuration Properties
## use org.springframework.boot.autoconfigure.integration.IntegrationProperties.Poller

spring:
  datasource:
    url: jdbc:h2:mem:foobardb
    

  jpa:
    show-sql: true
    hibernate: 
      dialect: org.hibernate.dialect.H2Dialect
      ddl-auto: update
  liquibase:
    enabled: false
    
  integration: 
    poller:
      initial-delay: 0
      fixed-delay: 1000
  cloud:
    
    function:
      #definition: consume;supply;
      definition: supply;toUppercase;consume
    stream:
       #source: toStream
       kafka:
        binder:
          replication-factor: 1
          brokers:
          - localhost:9092
       #input-bindings: fooin;barin
       #output-bindings: fooout;barout      
       bindings:
        consume-in-0: 
          destination: out-topic
        supply-out-0:
          destination: app-topic
        toUppercase-in-0: 
          destination: app-topic
        toUppercase-out-0: 
          destination: out-topic



# server.port: 9081

# spring.cloud.stream:
#   function.definition: eventProcessor;eventListenConsumer;eventEntityProcessor
#   default-binder: kafka
#   kafka:
#     binder:
#       brokers:
#         - localhost:9092
#       configuration:
#         schema:
#           registry:
#             url: http://localhost:8081
#     streams:
#       binder:
#         configuration:
#           application:
#             id: event-broker-processor
#           schema:
#             registry:
#               url: http://localhost:8081
#     bindings:
#       eventEntityProcessor-in-0:
#         consumer:
#           configuration:
#             value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#             schema.registry.url: http://localhost:8081
#   bindings:
#     eventProcessor-in-0:
#       destination: pcfleischer.eventbroker.event_source
#     eventProcessor-out-0:
#       destination: pcfleischer.eventbroker.event_callback
#     eventListenConsumer-in-0:
#       destination: pcfleischer.eventbroker.event_source
#     eventEntityProcessor-in-0:
#       destination: events.public.event_entity
    